---
title: "Regresión logística"
author: "Hëctor Mondragón"
format: html
editor: visual
---
##Replicación del artículo de Cruz Schneider

En esta entrada se hace una replicación del artículo...


### Descargar datos

Primero se instalan las librerías que se usarán.

```{r}
pacman::p_load(MASS, tidyverse, haven, sandwich, lmtest, stargazer)
```

Recopilamos los datos del dataverse de la universidad de Harvard

```{r}
db<-data.frame(read_dta("ajps_data.dta"))
```

### Replicamos la primera tabla

```{r}
modelo1<-glm(rel_07 ~ as.factor(kc_phase1) + as.factor(provincename),
family=binomial(link="logit"), data=db,
subset = !is.na(prov_geocode))
```

```{r}
coeftest(modelo1)
```
´
La variable provincename excluye ciertas provincias por lo que no es la ideal.

Por tanto creamos la variable

Primero el vector con nombres de provincias.
```{r}
#Modelo 1, todas las provincias
vector_nombre_provs1<-c("kc_phase1", paste("provs", 1:27, sep=""),
paste("provs", 29:41, sep=""))
```


```{r}
dep_var<-"rel_07"
```
Y con los vectores anteriores construimos la fórmula
```{r}
formula1 <- as.formula(paste(dep_var,
paste(vector_nombre_provs1, collapse= "+"), sep="~"))
formula1
```

Con esa información construimos el modelo correcto. incluimos los datos para los cuales la variable de geolocalización existe.


```{r}
modelo1<-glm(formula1,
             family=binomial(link="logit"),
             data=db,
             subset= !is.na(prov_geocode))
```


### Resultados
```{r}
#Ver resultados
summary(modelo1)
#Ver Odds Ratio
exp1<-exp(coef(modelo1))
## esto es lo que reportan en el artículo.

#Ver pruebas de hipótesis con errores robustos por cluster agregados
coeftest(modelo1, vcov = vcovCL, cluster=~prov_geocode)
```


```{r}
#Matriz de varianza covarianza
matriz<-vcovCL(modelo1, type="HC0", cluster=~prov_geocode)

#Errores
robust_se1<-sqrt(diag(matriz))
```

### Imprimir tabla

```{r}
stargazer(modelo1, modelo1, apply.coef=exp, type = "text",
se = list(NULL, robust_se1), omit="provs", omit.labels = "Province FE")
```

### Modelo 2

```{r}
#Replicar y ajustar para modelos 2 
controles2<-c(vector_nombre_provs1, "poverty_nscb","log_pop","as.factor(urban)",
"tax_growth_avg_3yr")

formula2 <- as.formula(paste(dep_var, paste(controles2, collapse= "+"), sep="~"))
formula2
```


```{r}
modelo2<-glm(formula2, family=binomial(link="logit"), data=db,
subset= !is.na(prov_geocode))

#errores
robust_se2<-sqrt(diag(vcovCL(modelo2, type="HC0", cluster=~prov_geocode)))

```

### Modelo 3

```{r}
controles3<-c(controles2, "as.factor(term3_04)","contenders_07", "as.factor(dynasty_04)")
formula3<-as.formula(paste(dep_var, paste(controles3, collapse= "+"), sep="~"))
formula3

```

```{r}
modelo3<-glm(formula3, family=binomial(link="logit"), data=db,
subset= !is.na(prov_geocode))
robust_se3<-sqrt(diag(vcovCL(modelo3, type="HC0", cluster =~prov_geocode)))
```

##Resultados modelos 1, 2 y 3

```{r}
stargazer(modelo1, modelo2, modelo3, apply.coef=exp, type = "text",
se = list(NULL, robust_se1, robust_se2, robust_se3),
omit="provs", omit.labels="Province FE")

```
```{r}
ggplot(db, aes(x=kc_phase1, y=rel_07)) + geom_point() +
      stat_smooth(method="glm", color="green", se=TRUE,
                method.args = list(family=binomial))
```
```{r}

#Para saber la probabilidad de un fenómeno
faraway::ilogit(modelo3$coefficients)

##variable de interés
faraway::ilogit(coef(modelo3)[2])
#Intercepto, si los valores de los demás son 0
faraway::ilogit(coef(modelo3)[1])

```


```{r}

#para extraer el odds ratio de esa variable de interés

exp(coef(modelo3)[2])

```

